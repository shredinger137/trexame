[{"C:\\Users\\clewi\\git\\trexame\\site\\src\\index.js":"1","C:\\Users\\clewi\\git\\trexame\\site\\src\\App.js":"2","C:\\Users\\clewi\\git\\trexame\\site\\src\\serviceWorker.js":"3","C:\\Users\\clewi\\git\\trexame\\site\\src\\config.js":"4","C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Stats.js":"5","C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Dashboard.js":"6","C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Challenges.js":"7","C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Home.js":"8","C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\VerifyAccount.js":"9","C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Admin.js":"10","C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Login.js":"11","C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Header.js":"12","C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Signup.js":"13","C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\NewChallenge.js":"14","C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Achievements.js":"15"},{"size":503,"mtime":1597604017342,"results":"16","hashOfConfig":"17"},{"size":3911,"mtime":1608587513324,"results":"18","hashOfConfig":"17"},{"size":5086,"mtime":1597604017354,"results":"19","hashOfConfig":"17"},{"size":119,"mtime":1607828952007,"results":"20","hashOfConfig":"17"},{"size":3680,"mtime":1606276534171,"results":"21","hashOfConfig":"17"},{"size":8088,"mtime":1608265055743,"results":"22","hashOfConfig":"17"},{"size":3705,"mtime":1607542563411,"results":"23","hashOfConfig":"17"},{"size":333,"mtime":1606372969420,"results":"24","hashOfConfig":"17"},{"size":512,"mtime":1608349606893,"results":"25","hashOfConfig":"17"},{"size":6397,"mtime":1608261624248,"results":"26","hashOfConfig":"17"},{"size":3425,"mtime":1608620085231,"results":"27","hashOfConfig":"17"},{"size":1518,"mtime":1608589853751,"results":"28","hashOfConfig":"17"},{"size":4019,"mtime":1608620593119,"results":"29","hashOfConfig":"17"},{"size":1834,"mtime":1607884670632,"results":"30","hashOfConfig":"17"},{"size":3223,"mtime":1608587463347,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"5vvcw1",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},"C:\\Users\\clewi\\git\\trexame\\site\\src\\index.js",[],["68","69"],"C:\\Users\\clewi\\git\\trexame\\site\\src\\App.js",["70"],"//next: change the date storage to be unix date for easy sorting in the database\n\nimport React from 'react';\n\nimport './css/common.css'\n\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport Stats from './pages/Stats';\nimport './components/Signup';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport { config } from \"./config.js\";\n\nimport Signup from './components/Signup';\nimport Dashboard from './pages/Dashboard';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Challenges from './pages/Challenges';\nimport Admin from './pages/Admin';\nimport VerifyAccount from './pages/VerifyAccount';\n\n\nvar jwt = require('jsonwebtoken');\n\nclass App extends React.Component {\n\n\n  constructor(props) {\n    super(props);\n    this.checkLogin = this.checkLogin.bind(this);\n  }\n\n  state = {\n    showSignup: false,\n    isLoggedIn: null,\n    username: \"\",\n    userId: \"\",\n    showLogIn: false\n  };\n\n  componentDidMount() {\n    this.checkLogin();\n  }\n\n  componentDidUpdate() {\n\n  }\n\n\n  handleLoginClick = () => {\n    this.setState({\n      showLogIn: !this.state.showLogIn\n    });\n  }\n\n  checkLogin() {\n    var token = Cookies.get('token') ? Cookies.get('token') : false;\n    if (!token) {\n      return false;\n    }\n    axios.get(config.api + \"/verifytoken\" + \"?token=\" + token).then(res => {\n\n      if (res.data === \"Valid\" && jwt.decode(token) && jwt.decode(token)['username'] && jwt.decode(token)['id']) {\n        this.setState({ isLoggedIn: true, username: jwt.decode(token)['username'], userId: jwt.decode(token)['id'] });\n        return true;\n      } return false;\n\n    })\n\n  }\n\n  logOut() {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i];\n      var eqPos = cookie.indexOf(\"=\");\n      var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\n      document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n      window.location.href = '/';\n    }\n\n\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header\n          handleSignUpClick={this.handleSignUpClick}\n          handleLoginClick={this.handleLoginClick}\n          isLoggedIn={this.state.isLoggedIn}\n          username={this.state.username}\n          logOut={this.logOut} />\n        <BrowserRouter>\n          <div>\n            <Switch>\n              <>\n                <Route path=\"/dashboard\">\n                  <Dashboard\n                    checkLogin={this.checkLogin}\n                    username={this.state.username}\n                    userId={this.state.userId}\n                  />\n                </Route>\n                <Route path=\"/challenge-admin\">\n                  <Admin\n                  />\n                </Route>\n                <Route path=\"/stats\" component={Stats} />\n                <Route path=\"/challenges\"\n                  component={() =>\n                    <Challenges userId={this.state.userId} />\n                  }\n                />\n                <Route path=\"/signup\"\n                  component={() =>\n                    <Signup />\n                  }\n                />\n                <Route path=\"/login\"\n                  component={() =>\n                    <Login\n                      checkLogin={this.checkLogin}\n                      isLoggedIn={this.state.isLoggedIn}\n                      username={this.state.username} />\n                  }\n                />\n                <Route path=\"/verify\"\n                  component={() =>\n                    <VerifyAccount />\n                  }\n                />\n                <Route exact path=\"/\" component={Home} />\n\n\n              </>\n\n              <Route path=\"/\" component={() => <Home isLoggedIn={this.state.isLoggedIn} />} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\clewi\\git\\trexame\\site\\src\\serviceWorker.js",[],"C:\\Users\\clewi\\git\\trexame\\site\\src\\config.js",[],"C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Stats.js",[],"C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Dashboard.js",["71","72"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport '../components/Signup';\r\nimport { config } from \"../config.js\";\r\nimport Achievements from '../components/Achievements';\r\n\r\nimport \"../css/dashboard.css\"\r\n\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n\r\n    state = {\r\n        marathonName: \"\",\r\n        targetMiles: 0,\r\n        userData: {\r\n            progress: {},\r\n            marathon: \"bridging\",\r\n            name: \"\"\r\n        },\r\n        progressEntries: {},\r\n        progressSorted: [],\r\n        progressTotal: 0,\r\n        progressTotalPercent: 0,\r\n        marathonDistance: 0,\r\n        marathonName: \"\",\r\n        challengeId: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.initDate();\r\n        this.getMarathonData();\r\n        this.getUserData();\r\n    }\r\n\r\n    componentDidUpdate(prevprops, prevstate) {\r\n        if(this.props.userId != prevprops.userId){\r\n            this.getUserData();\r\n        }\r\n        \r\n    }\r\n\r\n    initDate() {\r\n        var d = new Date();\r\n        var month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n\r\n        if (month.length < 2)\r\n            month = '0' + month;\r\n        if (day.length < 2)\r\n            day = '0' + day;\r\n\r\n        document.getElementById('date').value = [year, month, day].join('-');\r\n\r\n    }\r\n\r\n    //TODO: Challenge isn't a state item.\r\n    //Date should be in unix time\r\n\r\n    handleAddMiles(event) {\r\n        event.preventDefault();\r\n        var newMiles = document.getElementById(\"addMiles\").value;\r\n        document.getElementById(\"addMiles\").value = \"\";\r\n        var newDate = document.getElementById(\"date\").value;\r\n        var unixTime = ((new Date(newDate)).getTime());\r\n        this.initDate();\r\n        console.log(unixTime);\r\n        axios.get(`${config.api}/updateprogress?user=${this.props.userId}&distance=${newMiles}&date=${unixTime}&challenge=${this.state.challengeId}`).then(\r\n            //put something here to load the latest data\r\n        )\r\n    }\r\n\r\n\r\n    getUserData() {\r\n        console.log(\"userdata\");\r\n        axios.get(`${config.api}/getUserChallengeData?user=${this.props.userId}&challenge=${this.state.challengeId}`).then(res => {\r\n            console.log(res);\r\n            this.setState({progressEntries: res.data });\r\n            this.setState({progressSorted: this.getDates()})\r\n        })\r\n    }\r\n\r\n    getMarathonData() {\r\n        var challengeId = this.getMarathonId();\r\n        if(challengeId){\r\n            this.setState({challengeId: challengeId});\r\n        }\r\n        axios.get(`${config.api}/getChallengeData?challengeId=${challengeId}`).then(res => {\r\n            this.setState({\r\n                challengeName: res.data.challengeName,\r\n                marathonDistance: res.data.targetMiles,\r\n                challengeAchievements: res.data.achievements,\r\n                challengeUnits: res.data.targetUnits\r\n            });\r\n            console.log(res.data.achievements);\r\n          \r\n        })\r\n    }\r\n\r\n    getMarathonId() {\r\n        const params = new URLSearchParams(window.location.search);\r\n        if (params && params.get(\"challenge\")) {\r\n            return params.get(\"challenge\");\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    handlePublicOption() {\r\n        var value = document.getElementById(\"publicToggle\").checked;\r\n        axios.get(`${config.api}/updatePublicOption?user=${this.state.id}&value=${value}`);\r\n    }\r\n\r\n    handleNotFound() {\r\n        document.getElementById(\"notFound\").style.display = \"block\";\r\n        document.getElementById(\"updateMilesForm\").style.display = \"none\";\r\n    }\r\n\r\n    getDates() {\r\n        \r\n        var total = 0;\r\n        var datesArray = [];\r\n        console.log(this.state.progressEntries);\r\n\r\n \r\n        for (var date in this.state.progressEntries) {\r\n            console.log(date);\r\n            var timestamp = new Date(Math.floor(date))\r\n            var dateString = (timestamp.getMonth() + 1) + \"-\" + (timestamp.getUTCDate()) + \"-\" + (timestamp.getFullYear());\r\n            datesArray.push([dateString, this.state.progressEntries[date]]);\r\n            total = total + this.state.progressEntries[date];\r\n        }\r\n        this.setState({progressTotal: total, progressTotalPercent: ((total / this.state.marathonDistance)) * 100});\r\n        return datesArray;\r\n    }\r\n\r\n    handleUpdateMarathon(event) {\r\n        event.preventDefault();\r\n        var newMarathonShortname = document.getElementById(\"marathon\").value;\r\n        axios.get(`${config.api}/updatemarathon?user=${this.state.id}&marathon=${newMarathonShortname}`).then(res => {\r\n            this.getID();\r\n        });\r\n    }\r\n\r\n\r\n    openOptionsModal() {\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h2>Dashboard</h2>\r\n                <div>\r\n                    <div id=\"progress\">\r\n                        <div id=\"progressBar\" style={{ width: this.state.progressTotalPercent + \"%\", maxWidth: \"100%\" }}>\r\n                        </div>\r\n                    </div>\r\n                    <span id=\"progressText\" style={{ width: \"50vw\" }}>Total: {this.state.progressTotal} / {this.state.marathonDistance}</span>\r\n                    <br />\r\n                    <span>Your Marathon: {this.state.challengeName} ({this.state.marathonDistance} {this.state.challengeUnits})</span>\r\n                    <br />\r\n                    <br />\r\n                    <form id=\"updateMilesForm\" onSubmit={this.handleAddMiles.bind(this)}>\r\n                        <br />\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style={{ textAlign: \"left\" }}>\r\n                                        <label htmlFor=\"addMiles\"><span>Distance ({this.state.challengeUnits}):{\" \"}</span></label>\r\n                                    </td>\r\n                                    <td >\r\n                                        <input id=\"addMiles\"></input>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{ textAlign: \"left\" }}>\r\n                                        <label htmlFor=\"date\"><span>Date:{\" \"}</span></label>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input id=\"date\" type=\"date\"></input>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <button type=\"submit\">Submit</button>\r\n                        <br /><br />\r\n                      </form>\r\n                    <br />\r\n                    <br />\r\n                    <table>\r\n                        <tbody>\r\n                            {this.state.progressSorted.map(\r\n                                date => (\r\n                                    <tr key={date[0]}>\r\n                                        <td><span>{date[0]}:{\"  \"}</span></td><td><span>{\"  \"}{date[1]} {this.state.challengeUnits}</span></td>\r\n                                    </tr>\r\n                                )\r\n\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                    <div id=\"notFound\" style={{ display: \"none\" }}><p>The requested ID was not found. Please check your email for the correct link, or write to <a href=\"mailto:admin@rrderby.org\">admin@rrderby.org</a> for help.</p></div>\r\n                    <br />\r\n                    <h3>Achievements: {this.state.marathonName}</h3>\r\n                    <Achievements \r\n                        miles={this.state.progressTotal} \r\n                        marathon={this.state.userData.marathon}\r\n                        achievements={this.state.challengeAchievements}\r\n                        challengeId={this.state.challengeId} \r\n                    />\r\n                    <br /><br />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Challenges.js",[],"C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Home.js",[],"C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\VerifyAccount.js",["73","74"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { config } from \"../config.js\";\r\n\r\nclass VerifyAccount extends React.Component {\r\n\r\n  state = {\r\n    challengeId: \"\",\r\n    challengeData: {},\r\n    challengeAchievements: [],\r\n    newSubmissionImage: \"\"\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n   \r\n  }\r\n\r\n  componentDidUpdate(prevprops, prevstate) {\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          Verify\r\n\r\n\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default VerifyAccount;\r\n","C:\\Users\\clewi\\git\\trexame\\site\\src\\pages\\Admin.js",["75","76","77"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { config } from \"../config.js\";\r\n\r\nclass Admin extends React.Component {\r\n\r\n  state = {\r\n    challengeId: \"\",\r\n    challengeData: {},\r\n    challengeAchievements: [],\r\n    newSubmissionImage: \"\"\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.getChallengeId();\r\n  }\r\n\r\n  componentDidUpdate(prevprops, prevstate) {\r\n    if (prevstate.challengeId != this.state.challengeId) {\r\n      this.getChallengeData();\r\n    }\r\n  }\r\n\r\n  getChallengeId() {\r\n    const params = new URLSearchParams(window.location.search);\r\n    if (params && params.get(\"challenge\")) {\r\n      this.setState({ challengeId: params.get(\"challenge\") });\r\n      this.getChallengeData();\r\n    } else return false;\r\n  }\r\n\r\n  getChallengeData() {\r\n    axios.get(`${config.api}/getChallengeData?challengeId=${this.state.challengeId}&admin=true`).then(res => {\r\n      this.setState({ challengeData: res.data });\r\n      if (res.data.achievements) {\r\n        this.setState({ challengeAchievements: res.data.achievements });\r\n      }\r\n    })\r\n  }\r\n\r\n  saveData(e) {\r\n    e.preventDefault();\r\n    var challengeDataUpdated = `challengeName=${document.getElementById(\"name\").value}&targetMiles=${document.getElementById(\"miles\").value}&targetUnits=${document.getElementById(\"units\").value}&description=${document.getElementById(\"description\").value}`;\r\n    axios.get(`${config.api}/updateChallengeData?challengeId=${this.state.challengeId}&${encodeURI(challengeDataUpdated)}`).then(res => {\r\n\r\n    })\r\n\r\n  }\r\n\r\n  //TODO: Handle response on both of these.\r\n\r\n  submitNewAchievement(e) {\r\n    console.log(\"new\");\r\n    e.preventDefault();\r\n    var newAchivementData = `name=${document.getElementById(\"newAchievementName\").value}&distance=${document.getElementById(\"newAchievementDistance\").value}&description=${document.getElementById(\"newAchievementDescription\").value}&image=${this.state.newSubmissionImage}`;\r\n    axios.get(`${config.api}/submitNewAchievement?challengeId=${this.state.challengeId}&${encodeURI(newAchivementData)}`).then(res => {\r\n      this.getChallengeData();\r\n      document.getElementById(\"newAchievementName\").value = \"\";\r\n      document.getElementById(\"newAchievementDistance\").value = \"\";\r\n      document.getElementById(\"newAchievementDescription\").value = \"\";\r\n\r\n    })\r\n  }\r\n\r\n  handleImageUpload(e) {\r\n\r\n    e.preventDefault();\r\n    var file = e.target.files[0];\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n    data.append('challengeId', this.state.challengeId);\r\n    const headerConfig = {\r\n      headers: {\r\n        'content-type': 'multipart/form-data'\r\n      }\r\n    };\r\n\r\n    axios.post(`${config.api}/uploadImage?challengeId=${this.state.challengeId}`, data, headerConfig).then(res => {\r\n      if (res && res.data) {\r\n        this.setState({ newSubmissionImage: res.data });\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteAchievement(achievementId) {\r\n    axios.get(`${config.api}/deleteAchievement?challengeId=${this.state.challengeId}&achievementId=${achievementId}`).then(res => {\r\n      //console.log(res);\r\n      this.getChallengeData();\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <p>Challenge Admin</p>\r\n        <br /><br />\r\n        <form id=\"challengeForm\" onSubmit={this.saveData.bind(this)}>\r\n          <div className=\"form grid-2 formWrapper\" style={{ margin: \"0 auto\", width: \"80vw\" }}>\r\n            <label>\r\n              Challenge Name:\r\n            </label>\r\n            <input type=\"text\" id=\"name\" defaultValue={this.state.challengeData.challengeName} />\r\n            <label>Target Distance:</label>\r\n            <input type=\"number\" id=\"miles\" defaultValue={this.state.challengeData.targetMiles}></input>\r\n            <label>Target Metric:</label>\r\n            <input type=\"text\" id=\"units\" defaultValue={this.state.challengeData.targetUnits}></input>\r\n            <label>Description:</label>\r\n            <textarea id=\"description\" defaultValue={this.state.challengeData.description}></textarea>\r\n          </div>\r\n          <br />\r\n          <input type=\"submit\" value=\"Update\" />\r\n        </form>\r\n        <br /><br />\r\n        <p>Challenge Achievements</p>\r\n        <br />\r\n        <form id=\"newAchivementForm\" onSubmit={this.submitNewAchievement.bind(this)}>\r\n          <div className=\"achievementEditWrapper form grid-2 formWrapper\" style={{ margin: \"0 auto\", width: \"80vw\" }}>\r\n            <label>Name:</label>\r\n            <input id=\"newAchievementName\" required>\r\n            </input>\r\n            <label>Distance (Miles): </label>\r\n            <input type=\"number\" id=\"newAchievementDistance\" required></input>\r\n            <label>Description:</label>\r\n            <textarea id=\"newAchievementDescription\"></textarea>\r\n            <label>Image:</label>\r\n            <input type=\"file\" onChange={this.handleImageUpload.bind(this)} accept=\"image/png, image/jpeg\" required></input>\r\n          </div>\r\n\r\n\r\n          <input type=\"submit\" value=\"Add New Achivement\" />\r\n          <br />\r\n\r\n        </form>\r\n        {this.state.newSubmissionImage ?\r\n          <div className=\"achievementsItemWrapper\">\r\n            <img src={`${config.uploadedImagesRoot}/${this.state.challengeId}/${this.state.newSubmissionImage}`} style={{ width: \"150px\" }}></img>\r\n          </div>\r\n          : null}\r\n        {this.state.challengeAchievements.map(achievement => (\r\n          <form>\r\n            <div className=\"achievementEditWrapper form grid-2 formWrapper\" style={{ margin: \"0 auto\", width: \"80vw\" }}>\r\n              <label>Name:</label>\r\n              <span style={{ textAlign: \"left\" }}>\r\n                {achievement.name}\r\n              </span>\r\n              <label>Distance (Miles): </label>\r\n              <span style={{ textAlign: \"left\" }}>\r\n                {achievement.distance}\r\n              </span>\r\n              <label>Description:</label>\r\n              <span style={{ textAlign: \"left\" }}>{achievement.description}</span>\r\n              <label>Image:</label>\r\n              <img src={`${config.uploadedImagesRoot}/${this.state.challengeId}/${achievement.image}`} style={{ width: \"150px\" }} />\r\n              <label></label>\r\n              <span style={{ textAlign: \"left\" }} onClick={() => this.deleteAchievement(achievement.ident)}>Delete</span>\r\n            </div>\r\n            <br />\r\n          </form>\r\n        ))}\r\n\r\n\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default Admin;\r\n","C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Login.js",["78","79"],"C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Header.js",[],"C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Signup.js",["80","81"],"C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\NewChallenge.js",[],"C:\\Users\\clewi\\git\\trexame\\site\\src\\components\\Achievements.js",["82","83","84","85","86","87","88"],"import React from 'react';\r\nimport { config } from \"../config.js\";\r\n\r\nclass Achievements extends React.Component {\r\n\r\n    state = {\r\n        badges: [],\r\n        nextBadge: {},\r\n        showNextBadge: false\r\n    }\r\n\r\n    componentDidUpdate(prevprops, prevstate) {\r\n        if (prevprops.miles != this.props.miles || prevprops.marathon != this.props.marathon || prevprops.achievements != this.props.achievements || prevprops.challengeId != this.props.challengeId) {\r\n            this.getAllBadges();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllBadges();\r\n        console.log(this.props);\r\n    }\r\n\r\n\r\n    //I got confused on data structures here\r\n    //The key should be the mile marker? \r\n\r\n    getAllBadges() {\r\n        this.setState({ showNextBadge: false })\r\n\r\n        var gotNextBadge = false;\r\n\r\n        var allBadges = [];\r\n\r\n        var list = this.props.achievements;\r\n\r\n        console.log(list);\r\n     \r\n        if (list && Array.isArray(list) == true) {\r\n            for (var badge of list) {\r\n\r\n                //each 'badge' is an object\r\n                //each one has keys name, desc, image, mile\r\n\r\n                if (badge.distance && badge.distance <= this.props.miles) {\r\n                    allBadges.push(badge);\r\n                } else {\r\n                    if (gotNextBadge == false) {\r\n                        this.setState({ nextBadge: badge, showNextBadge: true });\r\n                        gotNextBadge = true;\r\n                        break;\r\n                    }\r\n                }\r\n                this.setState({ badges: allBadges });\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"badgeGrid\">\r\n                {this.state.badges.map(badge =>\r\n                    <div key={badge.name}>\r\n                        <span className=\"badgeName\">{badge.name}</span><br />\r\n                        <img src={`${config.uploadedImagesRoot}/${this.props.challengeId}/${badge.image}`} width=\"150px\" alt={`${badge.name}: ${badge.desc}`}></img>\r\n                        <br />\r\n                        <span className=\"badgeDescription\">{badge.description}</span>\r\n                        <br />\r\n                        <span className=\"badgeDescription\">{badge.distance} Miles</span>\r\n                    </div>\r\n                )}\r\n                {this.state.showNextBadge == true ?\r\n                    <div>\r\n                        <span className=\"badgeName nextBadge\">{this.state.nextBadge.name}</span><br />\r\n                        <img className=\"nextBadge\" src={`${config.uploadedImagesRoot}/${this.props.challengeId}/${this.state.nextBadge.image}`} width=\"150px\" alt={`${this.state.nextBadge.name}: ${this.state.nextBadge.desc}`}></img>\r\n                        <br />\r\n                        <span className=\"badgeDescription nextBadge\">{this.state.nextBadge.description}</span>\r\n                        <br />\r\n                        <span className=\"badgeDescription\">Unlocked at {this.state.nextBadge.distance} Miles</span>\r\n                    </div>\r\n                    :\r\n\r\n                    \"\"\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Achievements;\r\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":62,"column":43,"nodeType":"95","messageId":"96","endLine":62,"endColumn":44},{"ruleId":"97","severity":1,"message":"98","line":26,"column":9,"nodeType":"99","messageId":"100","endLine":26,"endColumn":21},{"ruleId":"101","severity":1,"message":"102","line":37,"column":30,"nodeType":"95","messageId":"100","endLine":37,"endColumn":32},{"ruleId":"103","severity":1,"message":"104","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":13},{"ruleId":"103","severity":1,"message":"107","line":3,"column":10,"nodeType":"105","messageId":"106","endLine":3,"endColumn":16},{"ruleId":"101","severity":1,"message":"102","line":20,"column":31,"nodeType":"95","messageId":"100","endLine":20,"endColumn":33},{"ruleId":"108","severity":1,"message":"109","line":138,"column":13,"nodeType":"110","endLine":138,"endColumn":141},{"ruleId":"108","severity":1,"message":"109","line":155,"column":15,"nodeType":"110","endLine":155,"endColumn":133},{"ruleId":"103","severity":1,"message":"111","line":5,"column":10,"nodeType":"105","messageId":"106","endLine":5,"endColumn":20},{"ruleId":"101","severity":1,"message":"112","line":30,"column":28,"nodeType":"95","messageId":"100","endLine":30,"endColumn":30},{"ruleId":"103","severity":1,"message":"113","line":4,"column":5,"nodeType":"105","messageId":"106","endLine":4,"endColumn":10},{"ruleId":"101","severity":1,"message":"112","line":19,"column":20,"nodeType":"95","messageId":"100","endLine":19,"endColumn":22},{"ruleId":"101","severity":1,"message":"102","line":13,"column":29,"nodeType":"95","messageId":"100","endLine":13,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":13,"column":71,"nodeType":"95","messageId":"100","endLine":13,"endColumn":73},{"ruleId":"101","severity":1,"message":"102","line":13,"column":120,"nodeType":"95","messageId":"100","endLine":13,"endColumn":122},{"ruleId":"101","severity":1,"message":"102","line":13,"column":172,"nodeType":"95","messageId":"100","endLine":13,"endColumn":174},{"ruleId":"101","severity":1,"message":"112","line":38,"column":41,"nodeType":"95","messageId":"100","endLine":38,"endColumn":43},{"ruleId":"101","severity":1,"message":"112","line":47,"column":38,"nodeType":"95","messageId":"100","endLine":47,"endColumn":40},{"ruleId":"101","severity":1,"message":"112","line":73,"column":43,"nodeType":"95","messageId":"100","endLine":73,"endColumn":45},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-dupe-keys","Duplicate key 'marathonName'.","ObjectExpression","unexpected","eqeqeq","Expected '!==' and instead saw '!='.","no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'config' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useHistory' is defined but never used.","Expected '===' and instead saw '=='.","'route' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]